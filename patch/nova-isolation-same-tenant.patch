diff -Naur /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/compute/admin_password.py /usr/lib/python2.7/dist-packages/nova/api/openstack/compute/admin_password.py
--- /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/compute/admin_password.py	2017-12-14 22:08:54.848273103 +0100
+++ /usr/lib/python2.7/dist-packages/nova/api/openstack/compute/admin_password.py	2017-12-14 22:10:24.384327784 +0100
@@ -43,10 +43,10 @@
     @validation.schema(admin_password.change_password)
     def change_password(self, req, id, body):
         context = req.environ['nova.context']
-        authorize(context)
+        instance = common.get_instance(self.compute_api, context, id)
+        authorize(context, target=instance)
 
         password = body['changePassword']['adminPass']
-        instance = common.get_instance(self.compute_api, context, id)
         try:
             self.compute_api.set_admin_password(context, instance, password)
         except exception.InstanceUnknownCell as e:
diff -Naur /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/compute/console_output.py /usr/lib/python2.7/dist-packages/nova/api/openstack/compute/console_output.py
--- /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/compute/console_output.py	2017-12-14 22:08:54.848273103 +0100
+++ /usr/lib/python2.7/dist-packages/nova/api/openstack/compute/console_output.py	2017-12-15 12:56:18.484835554 +0100
@@ -41,9 +41,9 @@
     def get_console_output(self, req, id, body):
         """Get text console output."""
         context = req.environ['nova.context']
-        authorize(context)
-
         instance = common.get_instance(self.compute_api, context, id)
+        authorize(context, target=instance)
+
         length = body['os-getConsoleOutput'].get('length')
         # TODO(cyeoh): In a future API update accept a length of -1
         # as meaning unlimited length (convert to None)
diff -Naur /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/compute/lock_server.py /usr/lib/python2.7/dist-packages/nova/api/openstack/compute/lock_server.py
--- /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/compute/lock_server.py	2017-12-14 22:08:54.852273106 +0100
+++ /usr/lib/python2.7/dist-packages/nova/api/openstack/compute/lock_server.py	2017-12-14 22:14:25.252474878 +0100
@@ -34,8 +34,8 @@
     def _lock(self, req, id, body):
         """Lock a server instance."""
         context = req.environ['nova.context']
-        authorize(context, action='lock')
         instance = common.get_instance(self.compute_api, context, id)
+        authorize(context, action='lock', target=instance)
         self.compute_api.lock(context, instance)
 
     @wsgi.response(202)
@@ -44,8 +44,8 @@
     def _unlock(self, req, id, body):
         """Unlock a server instance."""
         context = req.environ['nova.context']
-        authorize(context, action='unlock')
         instance = common.get_instance(self.compute_api, context, id)
+        authorize(context, action='unlock', target=instance)
         if not self.compute_api.is_expected_locked_by(context, instance):
             authorize(context, target=instance,
                       action='unlock:unlock_override')
diff -Naur /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/compute/pause_server.py /usr/lib/python2.7/dist-packages/nova/api/openstack/compute/pause_server.py
--- /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/compute/pause_server.py	2017-12-14 22:08:54.848273103 +0100
+++ /usr/lib/python2.7/dist-packages/nova/api/openstack/compute/pause_server.py	2017-12-15 07:43:49.200520070 +0100
@@ -37,8 +37,8 @@
     def _pause(self, req, id, body):
         """Permit Admins to pause the server."""
         ctxt = req.environ['nova.context']
-        authorize(ctxt, action='pause')
         server = common.get_instance(self.compute_api, ctxt, id)
+        authorize(ctxt, action='pause', target=server)
         try:
             self.compute_api.pause(ctxt, server)
         except exception.InstanceIsLocked as e:
@@ -58,8 +58,8 @@
     def _unpause(self, req, id, body):
         """Permit Admins to unpause the server."""
         ctxt = req.environ['nova.context']
-        authorize(ctxt, action='unpause')
         server = common.get_instance(self.compute_api, ctxt, id)
+        authorize(ctxt, action='unpause', target=server)
         try:
             self.compute_api.unpause(ctxt, server)
         except exception.InstanceIsLocked as e:
diff -Naur /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/compute/remote_consoles.py /usr/lib/python2.7/dist-packages/nova/api/openstack/compute/remote_consoles.py
--- /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/compute/remote_consoles.py	2017-12-14 22:08:54.844273100 +0100
+++ /usr/lib/python2.7/dist-packages/nova/api/openstack/compute/remote_consoles.py	2017-12-15 13:29:36.868186112 +0100
@@ -44,13 +44,13 @@
     def get_vnc_console(self, req, id, body):
         """Get text console output."""
         context = req.environ['nova.context']
-        authorize(context)
+        instance = common.get_instance(self.compute_api, context, id)
+        authorize(context, target=instance)
 
         # If type is not supplied or unknown, get_vnc_console below will cope
         console_type = body['os-getVNCConsole'].get('type')
 
         try:
-            instance = common.get_instance(self.compute_api, context, id)
             output = self.compute_api.get_vnc_console(context,
                                                       instance,
                                                       console_type)
@@ -73,13 +73,13 @@
     def get_spice_console(self, req, id, body):
         """Get text console output."""
         context = req.environ['nova.context']
-        authorize(context)
+        instance = common.get_instance(self.compute_api, context, id)
+        authorize(context, target=instance)
 
         # If type is not supplied or unknown, get_spice_console below will cope
         console_type = body['os-getSPICEConsole'].get('type')
 
         try:
-            instance = common.get_instance(self.compute_api, context, id)
             output = self.compute_api.get_spice_console(context,
                                                         instance,
                                                         console_type)
@@ -102,12 +102,12 @@
     def get_rdp_console(self, req, id, body):
         """Get text console output."""
         context = req.environ['nova.context']
-        authorize(context)
+        instance = common.get_instance(self.compute_api, context, id)
+        authorize(context, target=instance)
 
         # If type is not supplied or unknown, get_rdp_console below will cope
         console_type = body['os-getRDPConsole'].get('type')
 
-        instance = common.get_instance(self.compute_api, context, id)
         try:
             # NOTE(mikal): get_rdp_console() can raise InstanceNotFound, so
             # we still need to catch it here.
@@ -133,12 +133,12 @@
     def get_serial_console(self, req, id, body):
         """Get connection to a serial console."""
         context = req.environ['nova.context']
-        authorize(context)
+        instance = common.get_instance(self.compute_api, context, id)
+        authorize(context, target=instance)
 
         # If type is not supplied or unknown get_serial_console below will cope
         console_type = body['os-getSerialConsole'].get('type')
         try:
-            instance = common.get_instance(self.compute_api, context, id)
             output = self.compute_api.get_serial_console(context,
                                                          instance,
                                                          console_type)
diff -Naur /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/compute/server_metadata.py /usr/lib/python2.7/dist-packages/nova/api/openstack/compute/server_metadata.py
--- /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/compute/server_metadata.py	2017-12-14 22:08:54.848273103 +0100
+++ /usr/lib/python2.7/dist-packages/nova/api/openstack/compute/server_metadata.py	2017-12-15 13:36:17.950011795 +0100
@@ -55,7 +55,8 @@
     def index(self, req, server_id):
         """Returns the list of metadata for a given instance."""
         context = req.environ['nova.context']
-        authorize(context, action='index')
+        server = common.get_instance(self.compute_api, context, server_id)
+        authorize(context, action='index', target=server)
         return {'metadata': self._get_metadata(context, server_id)}
 
     @extensions.expected_errors((400, 403, 404, 409, 413))
@@ -65,7 +66,8 @@
     def create(self, req, server_id, body):
         metadata = body['metadata']
         context = req.environ['nova.context']
-        authorize(context, action='create')
+        server = common.get_instance(self.compute_api, context, server_id)
+        authorize(context, action='create', target=server)
         new_metadata = self._update_instance_metadata(context,
                                                       server_id,
                                                       metadata,
@@ -77,7 +79,8 @@
     @validation.schema(server_metadata.update)
     def update(self, req, server_id, id, body):
         context = req.environ['nova.context']
-        authorize(context, action='update')
+        server = common.get_instance(self.compute_api, context, server_id)
+        authorize(context, action='update', target=server)
         meta_item = body['meta']
         if id not in meta_item:
             expl = _('Request body and URI mismatch')
@@ -94,7 +97,8 @@
     @validation.schema(server_metadata.update_all)
     def update_all(self, req, server_id, body):
         context = req.environ['nova.context']
-        authorize(context, action='update_all')
+        server = common.get_instance(self.compute_api, context, server_id)
+        authorize(context, action='update_all', target=server)
         metadata = body['metadata']
         new_metadata = self._update_instance_metadata(context,
                                                       server_id,
@@ -129,7 +133,8 @@
     def show(self, req, server_id, id):
         """Return a single metadata item."""
         context = req.environ['nova.context']
-        authorize(context, action='show')
+        server = common.get_instance(self.compute_api, context, server_id)
+        authorize(context, action='show', target=server)
         data = self._get_metadata(context, server_id)
 
         try:
@@ -143,14 +148,14 @@
     def delete(self, req, server_id, id):
         """Deletes an existing metadata."""
         context = req.environ['nova.context']
-        authorize(context, action='delete')
+        server = common.get_instance(self.compute_api, context, server_id)
+        authorize(context, action='delete', target=server)
         metadata = self._get_metadata(context, server_id)
 
         if id not in metadata:
             msg = _("Metadata item was not found")
             raise exc.HTTPNotFound(explanation=msg)
 
-        server = common.get_instance(self.compute_api, context, server_id)
         try:
             self.compute_api.delete_instance_metadata(context, server, id)
 
diff -Naur /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/compute/server_password.py /usr/lib/python2.7/dist-packages/nova/api/openstack/compute/server_password.py
--- /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/compute/server_password.py	2017-12-14 22:08:54.844273100 +0100
+++ /usr/lib/python2.7/dist-packages/nova/api/openstack/compute/server_password.py	2017-12-14 22:26:42.976925402 +0100
@@ -34,8 +34,8 @@
     @extensions.expected_errors(404)
     def index(self, req, server_id):
         context = req.environ['nova.context']
-        authorize(context)
         instance = common.get_instance(self.compute_api, context, server_id)
+        authorize(context, target=instance)
 
         passw = password.extract_password(instance)
         return {'password': passw or ''}
@@ -50,8 +50,8 @@
         """
 
         context = req.environ['nova.context']
-        authorize(context)
         instance = common.get_instance(self.compute_api, context, server_id)
+        authorize(context, target=instance)
         meta = password.convert_password(context, None)
         instance.system_metadata.update(meta)
         instance.save()
diff -Naur /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/compute/servers.py /usr/lib/python2.7/dist-packages/nova/api/openstack/compute/servers.py
--- /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/compute/servers.py	2017-12-14 22:08:54.848273103 +0100
+++ /usr/lib/python2.7/dist-packages/nova/api/openstack/compute/servers.py	2017-12-15 13:48:24.716984284 +0100
@@ -777,8 +777,8 @@
         resize_schema['properties']['resize']['properties'].update(schema)
 
     def _delete(self, context, req, instance_uuid):
-        authorize(context, action='delete')
         instance = self._get_server(context, req, instance_uuid)
+        authorize(context, action='delete', target=instance)
         if CONF.reclaim_instance_interval:
             try:
                 self.compute_api.soft_delete(context, instance)
@@ -799,7 +799,8 @@
 
         ctxt = req.environ['nova.context']
         update_dict = {}
-        authorize(ctxt, action='update')
+        instance = self._get_server(ctxt, req, id, is_detail=True)
+        authorize(ctxt, action='update', target=instance)
 
         if 'name' in body['server']:
             update_dict['display_name'] = common.normalize_name(
@@ -813,7 +814,6 @@
             self.update_extension_manager.map(self._update_extension_point,
                                               body['server'], update_dict)
 
-        instance = self._get_server(ctxt, req, id, is_detail=True)
         try:
             # NOTE(mikal): this try block needs to stay because save() still
             # might throw an exception.
@@ -833,8 +833,8 @@
     @wsgi.action('confirmResize')
     def _action_confirm_resize(self, req, id, body):
         context = req.environ['nova.context']
-        authorize(context, action='confirm_resize')
         instance = self._get_server(context, req, id)
+        authorize(context, action='confirm_resize', target=instance)
         try:
             self.compute_api.confirm_resize(context, instance)
         except exception.InstanceUnknownCell as e:
@@ -853,8 +853,8 @@
     @wsgi.action('revertResize')
     def _action_revert_resize(self, req, id, body):
         context = req.environ['nova.context']
-        authorize(context, action='revert_resize')
         instance = self._get_server(context, req, id)
+        authorize(context, action='revert_resize', target=instance)
         try:
             self.compute_api.revert_resize(context, instance)
         except exception.InstanceUnknownCell as e:
@@ -879,8 +879,8 @@
 
         reboot_type = body['reboot']['type'].upper()
         context = req.environ['nova.context']
-        authorize(context, action='reboot')
         instance = self._get_server(context, req, id)
+        authorize(context, action='reboot', target=instance)
 
         try:
             self.compute_api.reboot(context, instance, reboot_type)
@@ -893,8 +893,8 @@
     def _resize(self, req, instance_id, flavor_id, **kwargs):
         """Begin the resize process with given instance/flavor."""
         context = req.environ["nova.context"]
-        authorize(context, action='resize')
         instance = self._get_server(context, req, instance_id)
+        authorize(context, action='resize', target=instance)
 
         try:
             self.compute_api.resize(context, instance, flavor_id, **kwargs)
@@ -981,6 +981,10 @@
     @validation.schema(schema_server_resize)
     def _action_resize(self, req, id, body):
         """Resizes a given instance to the flavor size requested."""
+        context = req.environ['nova.context']
+        instance = self._get_server(context, req, id)
+        authorize(context, action='resize', target=instance)
+
         resize_dict = body['resize']
         flavor_ref = str(resize_dict["flavorRef"])
 
@@ -1008,8 +1012,8 @@
         password = self._get_server_admin_password(rebuild_dict)
 
         context = req.environ['nova.context']
-        authorize(context, action='rebuild')
         instance = self._get_server(context, req, id)
+        authorize(context, action='rebuild', target=instance)
 
         attr_map = {
             'name': 'display_name',
@@ -1083,7 +1087,8 @@
     def _action_create_image(self, req, id, body):
         """Snapshot a server instance."""
         context = req.environ['nova.context']
-        authorize(context, action='create_image')
+        instance = self._get_server(context, req, id)
+        authorize(context, action='create_image', target=instance)
 
         entity = body["createImage"]
         image_name = common.normalize_name(entity["name"])
@@ -1091,8 +1096,6 @@
 
         common.check_img_metadata_properties_quota(context, metadata)
 
-        instance = self._get_server(context, req, id)
-
         bdms = objects.BlockDeviceMappingList.get_by_instance_uuid(
                     context, instance.uuid)
 
diff -Naur /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/compute/shelve.py /usr/lib/python2.7/dist-packages/nova/api/openstack/compute/shelve.py
--- /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/compute/shelve.py	2017-12-14 22:08:54.848273103 +0100
+++ /usr/lib/python2.7/dist-packages/nova/api/openstack/compute/shelve.py	2017-12-14 22:33:54.833189133 +0100
@@ -38,9 +38,9 @@
     def _shelve(self, req, id, body):
         """Move an instance into shelved mode."""
         context = req.environ["nova.context"]
-        authorize(context, action='shelve')
-
         instance = common.get_instance(self.compute_api, context, id)
+        authorize(context, action='shelve', target=instance)
+
         try:
             self.compute_api.shelve(context, instance)
         except exception.InstanceUnknownCell as e:
@@ -57,9 +57,9 @@
     def _shelve_offload(self, req, id, body):
         """Force removal of a shelved instance from the compute node."""
         context = req.environ["nova.context"]
-        authorize(context, action='shelve_offload')
-
         instance = common.get_instance(self.compute_api, context, id)
+        authorize(context, action='shelve_offload', target=instance)
+
         try:
             self.compute_api.shelve_offload(context, instance)
         except exception.InstanceUnknownCell as e:
@@ -77,8 +77,9 @@
     def _unshelve(self, req, id, body):
         """Restore an instance from shelved mode."""
         context = req.environ["nova.context"]
-        authorize(context, action='unshelve')
         instance = common.get_instance(self.compute_api, context, id)
+        authorize(context, action='unshelve', target=instance)
+
         try:
             self.compute_api.unshelve(context, instance)
         except exception.InstanceUnknownCell as e:
diff -Naur /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/compute/suspend_server.py /usr/lib/python2.7/dist-packages/nova/api/openstack/compute/suspend_server.py
--- /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/compute/suspend_server.py	2017-12-14 22:08:54.848273103 +0100
+++ /usr/lib/python2.7/dist-packages/nova/api/openstack/compute/suspend_server.py	2017-12-15 13:49:41.529275546 +0100
@@ -37,9 +37,10 @@
     def _suspend(self, req, id, body):
         """Permit admins to suspend the server."""
         context = req.environ['nova.context']
-        authorize(context, action='suspend')
+        server = common.get_instance(self.compute_api, context, id)
+        authorize(context, action='suspend', target=server)
+
         try:
-            server = common.get_instance(self.compute_api, context, id)
             self.compute_api.suspend(context, server)
         except exception.InstanceUnknownCell as e:
             raise exc.HTTPNotFound(explanation=e.format_message())
@@ -55,9 +56,9 @@
     def _resume(self, req, id, body):
         """Permit admins to resume the server from suspend."""
         context = req.environ['nova.context']
-        authorize(context, action='resume')
+        server = common.get_instance(self.compute_api, context, id)
+        authorize(context, action='resume', target=server)
         try:
-            server = common.get_instance(self.compute_api, context, id)
             self.compute_api.resume(context, server)
         except exception.InstanceUnknownCell as e:
             raise exc.HTTPNotFound(explanation=e.format_message())
diff -Naur /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/compute/volumes.py /usr/lib/python2.7/dist-packages/nova/api/openstack/compute/volumes.py
--- /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/compute/volumes.py	2017-12-14 22:08:54.852273106 +0100
+++ /usr/lib/python2.7/dist-packages/nova/api/openstack/compute/volumes.py	2017-12-15 14:11:17.026578061 +0100
@@ -300,10 +300,11 @@
     def create(self, req, server_id, body):
         """Attach a volume to an instance."""
         context = req.environ['nova.context']
-        authorize(context)
-        authorize_attach(context, action='create')
-
         volume_id = body['volumeAttachment']['volumeId']
+        volume = self.volume_api.get(context, volume_id)
+        authorize(context, target=volume)
+        authorize_attach(context, action='create', target=volume)
+
         device = body['volumeAttachment'].get('device')
 
         instance = common.get_instance(self.compute_api, context, server_id)
@@ -355,7 +356,8 @@
     def update(self, req, server_id, id, body):
         context = req.environ['nova.context']
         authorize(context)
-        authorize_attach(context, action='update')
+        instance = common.get_instance(self.compute_api, context, server_id)
+        authorize_attach(context, action='update', target=instance)
 
         old_volume_id = id
         try:
@@ -376,8 +378,6 @@
             # NotFound response if that is not existent.
             raise exc.HTTPBadRequest(explanation=e.format_message())
 
-        instance = common.get_instance(self.compute_api, context, server_id)
-
         bdms = objects.BlockDeviceMappingList.get_by_instance_uuid(
                 context, instance.uuid)
         found = False
@@ -413,11 +413,11 @@
         """Detach a volume from an instance."""
         context = req.environ['nova.context']
         authorize(context)
-        authorize_attach(context, action='delete')
+        instance = common.get_instance(self.compute_api, context, server_id)
+        authorize_attach(context, action='delete', target=instance)
 
         volume_id = id
 
-        instance = common.get_instance(self.compute_api, context, server_id)
         if instance.vm_state in (vm_states.SHELVED,
                                  vm_states.SHELVED_OFFLOADED):
             _check_request_version(req, '2.20', 'detach_volume',
@@ -563,7 +563,7 @@
         res = [entity_maker(context, snapshot) for snapshot in limited_list]
         return {'snapshots': res}
 
-    @extensions.expected_errors(400)
+    @extensions.expected_errors((400, 403))
     @validation.schema(volumes_schema.snapshot_create)
     def create(self, req, body):
         """Creates a new snapshot."""
@@ -580,9 +580,12 @@
         else:
             create_func = self.volume_api.create_snapshot
 
-        new_snapshot = create_func(context, volume_id,
-                                   snapshot.get('display_name'),
-                                   snapshot.get('display_description'))
+        try:
+            new_snapshot = create_func(context, volume_id,
+                                       snapshot.get('display_name'),
+                                       snapshot.get('display_description'))
+        except exception.OverQuota as e:
+            raise exc.HTTPForbidden(explanation=e.format_message())
 
         retval = _translate_snapshot_detail_view(context, new_snapshot)
         return {'snapshot': retval}
diff -Naur /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/extensions.py /usr/lib/python2.7/dist-packages/nova/api/openstack/extensions.py
--- /usr/lib/python2.7/dist-packages/nova.orig/api/openstack/extensions.py	2017-12-14 22:08:54.852273106 +0100
+++ /usr/lib/python2.7/dist-packages/nova/api/openstack/extensions.py	2017-12-15 07:24:57.323828842 +0100
@@ -484,9 +484,9 @@
                         t_errors = errors
                     if exc.code in t_errors:
                         raise
-                elif isinstance(exc, exception.PolicyNotAuthorized):
+                elif isinstance(exc, exception.Forbidden):
                     # Note(cyeoh): Special case to handle
-                    # PolicyNotAuthorized exceptions so every
+                    # Forbidden exceptions so every
                     # extension method does not need to wrap authorize
                     # calls. ResourceExceptionHandler silently
                     # converts NotAuthorized to HTTPForbidden
diff -Naur /usr/lib/python2.7/dist-packages/nova.orig/volume/cinder.py /usr/lib/python2.7/dist-packages/nova/volume/cinder.py
--- /usr/lib/python2.7/dist-packages/nova.orig/volume/cinder.py	2017-12-14 22:08:54.824273088 +0100
+++ /usr/lib/python2.7/dist-packages/nova/volume/cinder.py	2017-12-15 07:25:50.811861510 +0100
@@ -187,6 +187,7 @@
     # TODO(jdg): Information may be lost in this translation
     d['volume_type_id'] = vol.volume_type
     d['snapshot_id'] = vol.snapshot_id
+    d['user_id'] = vol.user_id
     d['bootable'] = strutils.bool_from_string(vol.bootable)
     d['volume_metadata'] = {}
     for key, value in vol.metadata.items():
