diff -u /usr/lib/python2.7/site-packages/nova/api/openstack/compute/admin_password.py /usr/lib/python2.7/site-packages/nova/api/openstack/compute_new/admin_password.py
--- /usr/lib/python2.7/site-packages/nova/api/openstack/compute/admin_password.py      2016-01-25 15:39:13.000000000 +0100
+++ /usr/lib/python2.7/site-packages/nova/api/openstack/compute_new/admin_password.py  2016-05-13 16:38:08.602068584 +0200
@@ -43,10 +43,10 @@
     @validation.schema(admin_password.change_password)
     def change_password(self, req, id, body):
         context = req.environ['nova.context']
-        authorize(context)
+        instance = common.get_instance(self.compute_api, context, id)
+        authorize(context, target=instance)

         password = body['changePassword']['adminPass']
-        instance = common.get_instance(self.compute_api, context, id)
         try:
             self.compute_api.set_admin_password(context, instance, password)
         except exception.InstanceUnknownCell as e:
diff -u /usr/lib/python2.7/site-packages/nova/api/openstack/compute/console_output.py /usr/lib/python2.7/site-packages/nova/api/openstack/compute_new/console_output.py
--- /usr/lib/python2.7/site-packages/nova/api/openstack/compute/console_output.py      2016-01-25 15:39:13.000000000 +0100
+++ /usr/lib/python2.7/site-packages/nova/api/openstack/compute_new/console_output.py  2016-05-13 16:39:16.554063266 +0200
@@ -41,9 +41,9 @@ 
     def get_console_output(self, req, id, body):
         """Get text console output."""
         context = req.environ['nova.context']
-        authorize(context)
-
         instance = common.get_instance(self.compute_api, context, id)
+        authorize(context, target=instance)
+
         length = body['os-getConsoleOutput'].get('length')
         # TODO(cyeoh): In a future API update accept a length of -1
         # as meaning unlimited length (convert to None)
diff -u /usr/lib/python2.7/site-packages/nova/api/openstack/compute/server_metadata.py /usr/lib/python2.7/site-packages/nova/api/openstack/compute_new/server_metadata.py
--- /usr/lib/python2.7/site-packages/nova/api/openstack/compute/server_metadata.py      2016-01-25 15:39:13.000000000 +0100
+++ /usr/lib/python2.7/site-packages/nova/api/openstack/compute_new/server_metadata.py  2016-05-13 17:04:39.136061821 +0200
@@ -55,7 +55,8 @@ 
     def index(self, req, server_id):
         """Returns the list of metadata for a given instance."""
         context = req.environ['nova.context']
-        authorize(context, action='index')
+        instance = self._get_server(context, req, server_id)
+        authorize(context, action='index', target=instance)
         return {'metadata': self._get_metadata(context, server_id)}

     @extensions.expected_errors((400, 403, 404, 409, 413))
@@ -65,7 +66,8 @@ 
     def create(self, req, server_id, body):
         metadata = body['metadata']
         context = req.environ['nova.context']
-        authorize(context, action='create')
+        instance = common.get_instance(self.compute_api, context, server_id)
+        authorize(context, action='create', target=instance)
         new_metadata = self._update_instance_metadata(context,
                                                       server_id,
                                                       metadata,
@@ -77,7 +79,8 @@ 
     @validation.schema(server_metadata.update)
     def update(self, req, server_id, id, body):
         context = req.environ['nova.context']
-        authorize(context, action='update')
+        instance = common.get_instance(self.compute_api, context, server_id)
+        authorize(context, action='update', target=instance)
         meta_item = body['meta']
         if id not in meta_item:
             expl = _('Request body and URI mismatch')
@@ -94,7 +97,8 @@ 
     @validation.schema(server_metadata.update_all)
     def update_all(self, req, server_id, body):
         context = req.environ['nova.context']
-        authorize(context, action='update_all')
+        instance = common.get_instance(self.compute_api, context, server_id)
+        authorize(context, action='update_all', target=instance)
         metadata = body['metadata']
         new_metadata = self._update_instance_metadata(context,
                                                       server_id,
@@ -129,7 +133,8 @@
     def show(self, req, server_id, id):
         """Return a single metadata item."""
         context = req.environ['nova.context']
-        authorize(context, action='show')
+        instance = common.get_instance(self.compute_api, context, server_id)
+        authorize(context, action='show', target=instance)
         data = self._get_metadata(context, server_id)

         try:
@@ -143,7 +148,8 @@
     def delete(self, req, server_id, id):
         """Deletes an existing metadata."""
         context = req.environ['nova.context']
-        authorize(context, action='delete')
+        instance = common.get_instance(self.compute_api, context, server_id)
+        authorize(context, action='delete', target=instance)
         metadata = self._get_metadata(context, server_id)

         if id not in metadata:
diff -u /usr/lib/python2.7/site-packages/nova/api/openstack/compute/servers.py /usr/lib/python2.7/site-packages/nova/api/openstack/compute_new/servers.py
--- /usr/lib/python2.7/site-packages/nova/api/openstack/compute/servers.py      2016-05-13 16:31:38.698052272 +0200
+++ /usr/lib/python2.7/site-packages/nova/api/openstack/compute_new/servers.py  2016-05-13 16:36:09.149056219 +0200
@@ -753,8 +753,8 @@
         resize_schema['properties']['resize']['properties'].update(schema)

     def _delete(self, context, req, instance_uuid):
-        authorize(context, action='delete')
         instance = self._get_server(context, req, instance_uuid)
+        authorize(context, action='delete', target=instance)
         if CONF.reclaim_instance_interval:
             try: 
                 self.compute_api.soft_delete(context, instance)
@@ -774,7 +774,8 @@

         ctxt = req.environ['nova.context']
         update_dict = {}
-        authorize(ctxt, action='update')
+        instance = self._get_server(ctxt, req, id, is_detail=True)
+        authorize(ctxt, action='update', target=instance)

         if 'name' in body['server']:
             update_dict['display_name'] = common.normalize_name(
@@ -784,7 +785,6 @@
             self.update_extension_manager.map(self._update_extension_point,
                                               body['server'], update_dict)

-        instance = self._get_server(ctxt, req, id, is_detail=True)
         try:
             # NOTE(mikal): this try block needs to stay because save() still
             # might throw an exception.
@@ -804,8 +804,8 @@
     @wsgi.action('confirmResize')
     def _action_confirm_resize(self, req, id, body):
         context = req.environ['nova.context']
-        authorize(context, action='confirm_resize')
         instance = self._get_server(context, req, id)
+        authorize(context, action='confirm_resize', target=instance)
         try:
             self.compute_api.confirm_resize(context, instance)
         except exception.InstanceUnknownCell as e:
@@ -824,8 +824,8 @@
     @wsgi.action('revertResize')
     def _action_revert_resize(self, req, id, body):
         context = req.environ['nova.context']
-        authorize(context, action='revert_resize')
         instance = self._get_server(context, req, id)
+        authorize(context, action='revert_resize', target=instance)
         try:
             self.compute_api.revert_resize(context, instance)
         except exception.InstanceUnknownCell as e:
@@ -850,8 +850,8 @@

         reboot_type = body['reboot']['type'].upper()
         context = req.environ['nova.context']
-        authorize(context, action='reboot')
         instance = self._get_server(context, req, id)
+        authorize(context, action='reboot', target=instance)

         try:
             self.compute_api.reboot(context, instance, reboot_type)
@@ -864,8 +864,8 @@
     def _resize(self, req, instance_id, flavor_id, **kwargs):
         """Begin the resize process with given instance/flavor."""
         context = req.environ["nova.context"]
-        authorize(context, action='resize')
         instance = self._get_server(context, req, instance_id)
+        authorize(context, action='resize', target=instance)

         try:
             self.compute_api.resize(context, instance, flavor_id, **kwargs)
@@ -985,8 +985,8 @@
         password = self._get_server_admin_password(rebuild_dict)

         context = req.environ['nova.context']
-        authorize(context, action='rebuild')
         instance = self._get_server(context, req, id)
+        authorize(context, action='rebuild', target=instance)

         attr_map = {
             'name': 'display_name',
@@ -1059,7 +1059,8 @@
     def _action_create_image(self, req, id, body):
         """Snapshot a server instance."""
         context = req.environ['nova.context']
-        authorize(context, action='create_image')
+        instance = self._get_server(context, req, id)
+        authorize(context, action='create_image', target=instance)

         entity = body["createImage"]
         image_name = common.normalize_name(entity["name"])
@@ -1067,15 +1068,13 @@

         common.check_img_metadata_properties_quota(context, metadata)

-        instance = self._get_server(context, req, id)
-
         bdms = objects.BlockDeviceMappingList.get_by_instance_uuid(
                     context, instance.uuid)

         try:
             if self.compute_api.is_volume_backed_instance(context, instance,
                                                           bdms):
-                authorize(context, action="create_image:allow_volume_backed")
+                authorize(context, action="create_image:allow_volume_backed", target=instance)
                 image = self.compute_api.snapshot_volume_backed(
                                                        context,
                                                        instance,
